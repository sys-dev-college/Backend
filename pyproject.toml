[tool.pytest.ini_options]
asyncio_mode = "auto"
python_files = "test_*.py"
addopts = "-vv -x --lf -p no:warnings"

[tool.black]
line-length = 99
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 99

[tool.ruff]
line-length = 99
respect-gitignore = true
target-version = "py38"
select = [
  "F",     # Pyflakes
  "E",     # pycodestyle errors
  "W",     # pycodestyle warnings
  "C90",   # mccabe
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  # "ANN",   # flake8-annotations
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  # "BLE",   # flake8-blind-except
  # "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  # "COM",   # flake8-commas
  # "CPY",   # Copyright-related rules
  "C40",   # flake8-comprehensions
  # "DTZ",   # flake8-datetimez
  "T10",   # flake8-debugger
  # "DJ",    # flake8-django
  "EM",    # flake8-errmsg
  "EXE",   # flake8-executable
  "FA",    # flake8-future-annotations
  "ISC",   # flake8-implicit-str-concat
  "ICN",   # flake8-import-conventions
  "G",     # flake8-logging-format
  "INP",   # flake8-no-pep420
  "PIE",   # flake8-pie
  "T20",   # flake8-print
  "PYI",   # flake8-pyi
  "PT",    # flake8-pytest-style
  "Q",     # flake8-quotes
  "RSE",   # flake8-raise
  "RET",   # flake8-return
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "SIM",   # flake8-simplify
  "TID",   # flake8-tidy-imports
  "TCH",   # flake8-type-checking
  "INT",   # flake8-gettext
  "ARG",   # flake8-unused-arguments
  "PTH",   # flake8-use-pathlib
  "TD",    # flake8-todos
  "FIX",   # flake8-fixme
  "ERA",   # eradicate
  "PD",    # pandas-vet
  "PGH",   # pygrep-hooks
  "PL",    # Pylint
  "PLC",   # Pylint Convention
  "PLE",   # Pylint Error
  "PLR",   # Pylint Refactor
  "PLW",   # Pylint Warning
  "TRY",   # tryceratops
  "FLY",   # flynt
  "NPY",   # NumPy-specific rules
  "AIR",   # Airflow
  "PERF",  # Perflint
  "RUF",   # ruff
  "ALL",   # All not listed above
]
ignore = [
  "ANN",    # flake8-annotations
  "BLE",    # flake8-blind-except
  "FBT",    # flake8-boolean-trap
  "COM",    # flake8-commas
  # "CPY",    # Copyright
  "DTZ",    # flake8-datetimez
  "DJ",     # flake8-Django
  # "EM",     # flake8-errmsg
  "INP",    # flake8-no-pep420
  "PYI",    # flake8-pyi
  "Q",      # flake8-quotes
  "RET",    # flake8-return
  "PTH",    # flake8-use-pathlib
  "ERA",    # flake8-eradicate
  "PD",     # pandas-vet
  "D",      # pydocstyle
  "TRY",    # tryceratops
  "SLF",    # flake8-self
  # "E203",  # whitespace before ':' (black)
  "E501",    # line too long
  # "W503",  # line break before binary operator (black)
  # "W504",  # line break after binary operator (black)
  "B905",    # `zip()` without an explicit `strict=` parameter (python3.10+ only)
  "PLR0913", # Too many arguments to function call
  "A003",    # Class attribute builtin name shadowing
  "N818",    # Exception should be named with an Error suffix
  "PGH003",  # Use specific rule codes when ignoring type issues
  "ARG002",  # Unused method argument
  "RUF001",  # String contains ambiguous unicode character
  "RUF002",  # Docstring contains ambiguous unicode character
  "RUF003",  # Comment contains ambiguous unicode character
  "PLW2901", # for loop variable overwritten by assignment target
  "PLE1205", # https://github.com/charliermarsh/ruff/issues/3351
  "B030",    # Except handlers should only be exception classes or tuples of exception
  "UP006",   # Use `list` instead of `List` for type annotation
  "UP007",   # Use `X | Y` for type annotations
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
  "S301",    # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
  "S608",     # Possible SQL injection vector through string-based query construction TODO need for migrations
  "FA100",   # `__future__` import "annotations" missing
  "FIX002",  # Line contains TODO comment
  "TD003",   # Missing TODO issue link
]

[tool.ruff.per-file-ignores]
"tests/*.py" = [
  "S101",    # Use of assert detected
  "PLR2004", # Magic value used in comparison
  "S106",    # Possible hardcoded password
  "ARG001",  # Unused function argument
  "ARG005",  # Unused lambda argument
  "PT001",
  "PT023",
  "PT004",
  "PT006",
  "PT007",
  "N803",    # Argument name `async_DAL_fixture` should be lowercase
  "N802",    # Function name `async_DAL_fixture` should be lowercase
]


[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing_extensions", "typing"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.params.Depends",
  "fastapi.Query",
  "fastapi.Header",
  "fastapi.Body",
  "fastapi.File",
  "fastapi.Form",
  "fastapi.Cookie",
  "app.utils.dependencies.RestrictedFile",
]
