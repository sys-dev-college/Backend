"""init_migration

Revision ID: e9e87652f077
Revises:
Create Date: 2024-05-27 23:47:43.866569

"""
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "e9e87652f077"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "actions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("action_name_rus", sa.Text(collation="default"), nullable=False),
        sa.Column("action_name_eng", sa.Text(collation="default"), nullable=False),
        sa.Column("description", sa.Text(collation="default"), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "chats",
        sa.Column("id", sa.Uuid(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("archived", sa.Boolean(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "error_types",
        sa.Column("error_type_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("error_text", sa.String(), nullable=False),
        sa.Column("note", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("error_type_id"),
    )
    op.create_table(
        "invites",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "roles",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_token_blacklist",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("access_token", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Uuid(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("changed_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("phone_number", sa.String(), nullable=True),
        sa.Column("user_avatar_url", sa.String(), nullable=True),
        sa.Column("role_id", sa.Uuid(), server_default=sa.FetchedValue(), nullable=True),
        sa.Column("trainer_id", sa.Uuid(), server_default=sa.FetchedValue(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("WAITING_FOR_APPROVAL", "ACTIVE", name="userstatus", native_enum=False),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], onupdate="CASCADE", ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(
            ["trainer_id"], ["users.id"], onupdate="CASCADE", ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "calendars",
        sa.Column("id", sa.Uuid(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("scheduled", sa.DateTime(), server_default=sa.FetchedValue(), nullable=True),
        sa.Column("assigner_id", sa.Uuid(), nullable=True),
        sa.Column("type", sa.Enum("FOOD", "EXERCISE", name="calendartype"), nullable=False),
        sa.ForeignKeyConstraint(
            ["assigner_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "messages",
        sa.Column("id", sa.Uuid(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("author_id", sa.Uuid(), nullable=False),
        sa.Column("chat_id", sa.Uuid(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["chat_id"], ["chats.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "notifications",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "INVITE",
                "ADD_NOTE",
                "CHANGE_STATUS",
                "AGREEMENT_INITIATED",
                "UPLOAD_DOCUMENT",
                "NDA_ENABLE",
                "UPDATE_USER_PERMISSIONS",
                "ROOM_CHAT",
                name="notificationtype",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column("message", sa.String(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("NEW", "VIEWED", name="notificationstatus", native_enum=False),
            nullable=False,
        ),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.Column("details", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_chat",
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.Column("chat_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["chat_id"], ["chats.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "chat_id"),
        sa.UniqueConstraint("user_id", "chat_id", name="uq_user_chat"),
    )
    op.create_table(
        "user_errors",
        sa.Column("error_id", sa.Uuid(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("error_type_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["error_type_id"],
            ["error_types.error_type_id"],
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("error_id"),
    )
    op.create_table(
        "user_fingerprint",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("fingerprint_data", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tasks",
        sa.Column("id", sa.Uuid(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("calendar_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=True),
        sa.Column("unit", sa.String(), nullable=True),
        sa.Column("completed", sa.Boolean(), server_default=sa.FetchedValue(), nullable=False),
        sa.ForeignKeyConstraint(
            ["calendar_id"], ["calendars.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_session",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("fingerprint_id", sa.Uuid(), nullable=False),
        sa.Column("ip", sa.String(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("start_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("end_at", sa.DateTime(), nullable=True),
        sa.Column("state", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["fingerprint_id"],
            ["user_fingerprint.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "logs",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.FetchedValue(), nullable=False),
        sa.Column("details", sa.JSON(), nullable=True),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.Column("session_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["session_id"], ["user_session.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("logs")
    op.drop_table("user_session")
    op.drop_table("tasks")
    op.drop_table("user_fingerprint")
    op.drop_table("user_errors")
    op.drop_table("user_chat")
    op.drop_table("notifications")
    op.drop_table("messages")
    op.drop_table("calendars")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_table("user_token_blacklist")
    op.drop_table("roles")
    op.drop_table("invites")
    op.drop_table("error_types")
    op.drop_table("chats")
    op.drop_table("actions")
    # ### end Alembic commands ###
